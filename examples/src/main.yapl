
//interface Printable {
// fn print(): str;
//
//type Penis {
// a: str;
// b: int;
// c: float;
// d: Array;
//
//impl Printable for Penis {
// fn print(): str {
//   return `Penis: a={a}, b={b}, c={c}, d={d}`;
// }
//
//const penis1 = Penis{ .a = "Hello, World!",
//                    .b = 20,
//                    .c = 40.0,
//                    .d = [1, 2, 3, 4, 5] };
//const penis2 = Penis{ "Test", 1, 2.3, [1,2,3] };
//fn my_print(printable: Printable): void {
// print(printable.print());
//
//my_print(penis1);
//y_print(penis2);
// Single-line comment
//var x = 42;
//let message = "Hello, World!\n";
//const factor = 2;
//fn multiply(a, b) {
// return a * b
//}
//
//fn main() {
// var result = multiply(x, factor)
// if (result > 50) {
//   print("That's big!\n", message)
// } else {
//   print("Not so big...\n")
// }
//  // For loop
//  for var i; i < 3; i = i + 1; {
//    print("i is: ", i, "\n")
//  }
//}
//
//main()

//fn fib(a) {
//  if (a < 2) { return a; }
//  else { return fib(a-1) + fib(a-2); }
//}
//
//print(fib(35));

//let a = (1+2).to_string();
//print("Type is: ", a.type(), "\n");

//let a = [1, 2, 3];


//print(((1).to_string()).type())
//let a = 1
//let dirs = a.dir()
//
//for let i; i < dirs.size(); i = i + 1; {
//  print(dirs[i])
//}
//print(a.dir())

//let a = 2;
//print(a)
//a += 1
//print(a)
//a -= 1
//print(a)
//a *= 5
//print(a)
//a /= 2
//print(a)


//print(1 + 2.3)
//print(2.3 + 1)
//
//print(1 + "2")
//print("2" + 1)

//fn test_args(a, *args) {
//  print(args)
//  print(*args)
//}
//
//test_args(1, 2, 3, 4, 5, 6)
//test_args()
//print(1, 2, 3, 4, 5, 6)

//let a = ((1).type()).make(20)
//print(a.type())
//print(a)

//print(int)
//print(int.make(20))
//
//print(str)
//print(str.make("hello"))
//print(str.make(10))
//print(str.make(20.23))
//
//print("\n")
//
//print(str.make("hello", 2))
//print(str.make(10, 1))
//print(str.make(20.23, 12))

//-12
//print(-12)


//fn rofls(value) {
//  if value < 10 {
//    return int
//  }
//  return str
//}
//
//let tp = rofls(read_int())
//
//print(tp)
//print(tp.make(0))

//let a = 5;
//print(a);

//fn test() {
//  let b = "test_b";
//  print(b);
//}
//
//fn test2() {
//  let b = 1;
//  print("test2_b", b)
//  test();
//}
//
//test2();

//print("penis")
//test_dict[1] = "test"
//test_dict[[]] = 12
//print(test_dict)

//let a = 1
//let b = 1
//let c = 1
//
//print(id(a), id(b), id(c))

//print({1: "test", "2": "penis"})

//class Penis
//{
//  fn init(this, name)
//  {
//    this.name = name
//  }
//
//  fn print(this)
//  {
//    print("Penis { ", this.name, " }")
//  }
//
//  fn change_name(this, new_name)
//  {
//    this.name = new_name
//  }
//}
//
//const penis = Penis.make("Maksim")
//penis.print()
//penis.change_name("Sergay")
//penis.print()
//print(penis.name)
//
//fn test() { }
//
//print(test)
//print("penis")
//
//
//class Point {
//  fn init(this, X, Y) {
//    this.x = X
//    this.y = Y
//  }
//
//  fn print(this) {
//    print("Point {", this.x, ",", this.y, "}")
//  }
//
//  // other: Point
//  fn dist(this, other) {
//    const dx = other.x - this.x
//    const dy = other.y - this.y
//
//    return sqrt(dx*dx + dy*dy)
//  }
//}
//
//const p1 = Point.make(1, 1)
//const p2 = Point.make(0, 0)
//
//print(p1.dist(p2))
//
//
//class Line {
//  fn init(this, p1, p2) {
//    this.start = p1
//    this.end = p2
//  }
//
//  fn print(this) {
//    this.start.print()
//    this.end.print()
//  }
//
//  fn __str__(this) {
//    return "Line {" + this.len() + "}"
//  }
//
//  fn len(this) {
//    return this.start.dist(this.end)
//  }
//}
//
//const line = Line.make(p1, p2)
//const line_len = line.len()
//print(line)
//print(line_len)


//fn test() { print(1) }
//
//const list = ["Hello", "World", "!", 123, false, true, 69.420]
//
//
//for item : list {
//  print(item)
//  if (item.type() == str) {
//    print("------ string -------", item.type())
//    for char : item {
//      print(char)
//    }
//    print("------ end string -------")
//  }
//}

//class P {
//  fn init(this, x, y) {
//    this.x = x
//    this.y = y
//  }
//}
//
//const p = P(1, 2)
//print(p, p.x, p.y)


//print(pad_left("1111", "0", 2))

//class Penis { fn init(this) { this.x = "" } }
//const penis = Penis()
//penis.x = 5
//print(penis.x)

//import { pad_left, pad_right, join } from 'utils.yapl'
//
//const string = '12345'
//const _pad_len = 10
//const _pad_char = '#'
//
//print(pad_left(string, _pad_char, _pad_len))
//print(pad_right(string, _pad_char, _pad_len))
//
//print(pad_left, pad_right)
////print(generate_padding)
//print(join([1, 2, 3]))


//const arr = [4, 3, 9, 2, 0, 1121, 8, 29, 22, 2, 2, 2, 9, 7, 4, 6, 7]

//for let i = 0; i < arr.size(); i += 1; {
//  for let j = 0; j < arr.size(); j += 1; {
//    if arr[i] < arr[j] {
//      let temp = arr[i];
//      arr[i] = arr[j];
//      arr[j] = temp;
//    }
//  }
//}

//fn merge_ranges(a, left, mid, right, buffer)
//{
//    let i = left
//    let j = mid
//    let k = left
//
//    while i < mid and j < right {
//        if a[i] <= a[j] {
//          buffer[k] = a[i]
//          i += 1
//        } else {
//          buffer[k] = a[j]
//          j += 1
//        }
//        k += 1
//    }
//
//    // copy any tail
//    while (i < mid) { buffer[k] = a[i]; k += 1; i += 1; }
//    while (j < right) { buffer[k] = a[j]; k += 1; j += 1; }
//
//    // move sorted slice back to original array
//    for let t = left; t < right; t += 1; {
//        a[t] = buffer[t];
//    }
//}
//
//fn merge_sort_rec(a, left, right, buffer)
//{
//    if right - left <= 1 { return 0; }        // base case: 0 or 1 element
//
//    const mid = left + (right - left) / 2;
//    merge_sort_rec(a, left,  mid,  buffer);  // sort left half
//    merge_sort_rec(a, mid,   right, buffer); // sort right half
//    merge_ranges(a, left, mid, right, buffer);
//}
//
//fn generate_array(size) {
//  const arr = []
//  for let i = 0; i < size; i += 1; {
//    arr.append(0);
//  }
//
//  print(arr)
//  return arr
//}
//
//fn merge_sort(a)
//{
//    const buffer = generate_array(a.size());
//    merge_sort_rec(a, 0, a.size(), buffer);
//}
//
//print(arr)
//merge_sort(arr)
//print(arr)
//

//let foo;
//const bar = 20;
//
//let baz, qux;
//
//let quux = 10, fred = 20;
//
//fn add(a, b) {
//  return a + b
//}
//
//const add1 = add
//print(add1(1, 2))


fn sum(*args) {
   let s = 0
   for arg : args {
      s += arg
   }

   return s
}
const s = sum(1, 2, 3, 4, 5, 6, 7, 8)
print(s)
