
//interface Printable {
// fn print(): str;
//
//type Penis {
// a: str;
// b: int;
// c: float;
// d: Array;
//
//impl Printable for Penis {
// fn print(): str {
//   return `Penis: a={a}, b={b}, c={c}, d={d}`;
// }
//
//const penis1 = Penis{ .a = "Hello, World!",
//                    .b = 20,
//                    .c = 40.0,
//                    .d = [1, 2, 3, 4, 5] };
//const penis2 = Penis{ "Test", 1, 2.3, [1,2,3] };
//fn my_print(printable: Printable): void {
// print(printable.print());
//
//my_print(penis1);
//y_print(penis2);
// Single-line comment
//var x = 42;
//let message = "Hello, World!\n";
//const factor = 2;
//fn multiply(a: int, b: int): int {
// return a * b;
//}
//fn main(): void {
// var result = multiply(x, factor);
// if (result > 50) {
//   print("That's big!\n", message);
// } else {
//   print("Not so big...\n");
// }
//  // For loop
//  for var i; i < 3; i = i + 1; {
//    print("i is: ", i, "\n");
//  }
//}
//
//main();

//fn fib(a) {
//  if (a < 2) { return a; }
//  else { return fib(a-1) + fib(a-2); }
//}
//
//print(fib(35));

//let a = (1+2).to_string();
//print("Type is: ", a.type(), "\n");

//let a = [1, 2, 3];


//print(((1).to_string()).type())
//let a = 1
//let dirs = a.dir()
//
//for let i; i < dirs.size(); i = i + 1; {
//  print(dirs[i])
//}
//print(a.dir())

//let a = 2;
//print(a)
//a += 1
//print(a)
//a -= 1
//print(a)
//a *= 5
//print(a)
//a /= 2
//print(a)


//print(1 + 2.3)
//print(2.3 + 1)
//
//print(1 + "2")
//print("2" + 1)

//fn test_args(a, *args) {
//  print(args)
//  print(*args)
//}
//
//test_args(1, 2, 3, 4, 5, 6)
//test_args()
//print(1, 2, 3, 4, 5, 6)

//let a = ((1).type()).make(20)
//print(a.type())
//print(a)

//print(int)
//print(int.make(20))
//
//print(str)
//print(str.make("hello"))
//print(str.make(10))
//print(str.make(20.23))
//
//print("\n")
//
//print(str.make("hello", 2))
//print(str.make(10, 1))
//print(str.make(20.23, 12))

//-12
//print(-12)


//fn rofls(value) {
//  if value < 10 {
//    return int
//  }
//  return str
//}
//
//let tp = rofls(read_int())
//
//print(tp)
//print(tp.make(0))

//let a = 5;
//print(a);

//fn test() {
//  let b = "test_b";
//  print(b);
//}
//
//fn test2() {
//  let b = 1;
//  print("test2_b", b)
//  test();
//}
//
//test2();

//print("penis")
//test_dict[1] = "test"
//test_dict[[]] = 12
//print(test_dict)

//let a = 1
//let b = 1
//let c = 1
//
//print(id(a), id(b), id(c))

//print({1: "test", "2": "penis"})

class Penis
{
  fn init(this, name)
  {
    this.name = name
  }

  fn print(this)
  {
    print("Penis { ", this.name, " }")
  }

  fn change_name(this, new_name)
  {
    this.name = new_name
  }
}

const penis = Penis.make("Maksim")
penis.print()
penis.change_name("Sergay")
penis.print()
print(penis.name)

fn test() { }

print(test)
print("penis")